from skills.basic_skill import BasicSkill
from fpdf import FPDF
import os
from datetime import datetime

class TextToPDFSkill(BasicSkill):
    def __init__(self):
        self.name = 'TextToPDF'
        self.metadata = {
            "name": self.name,
            "description": "Converts text from a specified file into a formatted PDF. Suitable for various types of text files, including stories generated by the StoryGenerator skill.",
            "parameters": {
                "type": "object",
                "properties": {
                    "input_file_path": {
                        "type": "string",
                        "description": "The path to the input text file."
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the document (optional)."
                    },
                    "author": {
                        "type": "string",
                        "description": "The author of the document (optional)."
                    },
                    "output_filename": {
                        "type": "string",
                        "description": "The desired filename for the output PDF (optional, will generate a default if not provided)."
                    }
                },
                "required": ["input_file_path"]
            }
        }
        super().__init__(name=self.name, metadata=self.metadata)

    def perform(self, input_file_path, title=None, author=None, output_filename=None):
        try:
            # Read the input file
            with open(input_file_path, 'r', encoding='utf-8') as file:
                text = file.read()

            pdf = FPDF()
            pdf.add_page()
            
            # Set up fonts
            pdf.set_font("Arial", "B", 16)
            
            # Add title if provided, otherwise use input filename as title
            if title:
                pdf.cell(0, 10, title, 0, 1, 'C')
            else:
                title = os.path.basename(input_file_path)
                pdf.cell(0, 10, title, 0, 1, 'C')
            pdf.ln(10)
            
            # Add author if provided
            if author:
                pdf.set_font("Arial", "I", 12)
                pdf.cell(0, 10, f"By {author}", 0, 1, 'C')
                pdf.ln(10)
            
            # Add main content
            pdf.set_font("Arial", "", 12)
            for line in text.split('\n'):
                pdf.multi_cell(0, 10, line)
                pdf.ln(5)
            
            # Generate output filename if not provided
            if not output_filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                output_filename = f"generated_document_{timestamp}.pdf"
            
            # Ensure the filename has .pdf extension
            if not output_filename.lower().endswith('.pdf'):
                output_filename += '.pdf'
            
            # Create 'generated_pdfs' directory if it doesn't exist
            output_dir = 'generated_pdfs'
            os.makedirs(output_dir, exist_ok=True)
            
            # Full path for the output file
            output_path = os.path.join(output_dir, output_filename)
            
            # Save the PDF
            pdf.output(output_path, 'F')
            
            return f"Successfully converted the text file to a PDF. The file is saved as {output_path}"
        except FileNotFoundError:
            return f"Error: The input file '{input_file_path}' was not found."
        except PermissionError:
            return f"Error: Permission denied when trying to read '{input_file_path}' or write to the output directory."
        except Exception as e:
            return f"An error occurred while creating the PDF: {str(e)}"